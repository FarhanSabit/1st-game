#include <iostream>
#include <string>
#include <string.h>
#include <cstdio>
#include <math.h>
#include <windows.h>
#include <glut.h>
using namespace std;

int mouseX, mouseY;
float score = 0;
int lifeGone = 0;
const float PI = 3.14159;
int countL = 0;
int Leg = 1;
char quote[50][50];
void gameOver();
GLfloat UpwardsScrollVelocity = -10.0;
float view = 10.0;
int numberOfQuotes = 0;

struct myChar {
	int posX;
	int posY;
	float movedPos;
	bool visibility;
	myChar() { visibility = true;	movedPos = 0; }
};
myChar r[2][3], l[2][2];

void drawLLeg1(int antX, int antY) {
	glLineWidth(3);
	glBegin(GL_LINES);
	glColor3f(0.1, 0.1, 0.1);
	glVertex2f(antX + 25 + 15 - 1, antY + 23 - 1);
	glVertex2f(antX + 25 + 15 + 5, antY + 23 + 5);

	glVertex2f(antX + 25 + 3 + 1, antY + 23 - 1);
	glVertex2f(antX + 25 + 3 - 7, antY + 23 + 7);

	glVertex2f(antX + 5 + 1, antY + 25 - 1);
	glVertex2f(antX + 5 - 7, antY + 25 + 7);

	//--------------------------------------
	glVertex2f(antX + 25 + 15 - 1, antY + 2 + 1);
	glVertex2f(antX + 25 + 15 + 5, antY + 2 - 5);

	glVertex2f(antX + 25 + 3 + 1, antY + 2 + 1);
	glVertex2f(antX + 25 + 3 - 7, antY + 2 - 7);

	glVertex2f(antX + 5 + 1, antY + 1);
	glVertex2f(antX + 5 - 7, antY - 7);

	glEnd();
}
void drawLLeg2(int antX, int antY) {
	glLineWidth(3);
	glBegin(GL_LINES);
	glColor3f(0.1, 0.1, 0.1);
	glVertex2f(antX + 25 + 15 - 1, antY + 23 - 1);
	glVertex2f(antX + 25 + 15 - 5, antY + 23 + 5);

	glVertex2f(antX + 25 + 3 + 1, antY + 23 - 1);
	glVertex2f(antX + 25 + 3 + 7, antY + 23 + 7);

	glVertex2f(antX + 5 + 1, antY + 25 - 1);
	glVertex2f(antX + 5 + 7, antY + 25 + 7);

	//--------------------------------------
	glVertex2f(antX + 25 + 15 - 1, antY + 2 + 1);
	glVertex2f(antX + 25 + 15 - 5, antY + 2 - 5);

	glVertex2f(antX + 25 + 3 + 1, antY + 2 + 1);
	glVertex2f(antX + 25 + 3 + 7, antY + 2 - 7);

	glVertex2f(antX + 5 + 1, antY + 1);
	glVertex2f(antX + 5 + 7, antY - 7);

	glEnd();
}
void drawCharLeft(int antX, int antY) {
	antX += (550 - 400);
	antY += 300;
	if (Leg == 1)drawLLeg1(antX, antY);
	else drawLLeg2(antX, antY);
	glBegin(GL_POLYGON);
	glColor3f(0, 0, 0);
	glVertex2f(antX, antY + 5);
	glVertex2f(antX + 5, antY);
	glVertex2f(antX + 20, antY);
	glVertex2f(antX + 25, antY + 5);
	glVertex2f(antX + 25, antY + 20);
	glVertex2f(antX + 20, antY + 25);
	glVertex2f(antX + 5, antY + 25);
	glVertex2f(antX, antY + 20);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.1, 0.1, 0.1);
	glVertex2f(antX + 25, antY + 5);
	glVertex2f(antX + 25 + 3, antY + 2);
	glVertex2f(antX + 25 + 15, antY + 2);
	glVertex2f(antX + 25 + 15 + 3, antY + 5);
	glVertex2f(antX + 25 + 15 + 3, antY + 20);
	glVertex2f(antX + 25 + 15, antY + 23);
	glVertex2f(antX + 25 + 3, antY + 23);
	glVertex2f(antX + 25, antY + 20);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.2, 0.2);
	glVertex2f(antX + 43, antY + 5);
	glVertex2f(antX + 43 + 2, antY + 4);
	glVertex2f(antX + 43 + 8, antY + 4);
	glVertex2f(antX + 43 + 9 + 3, antY + 7);
	glVertex2f(antX + 43 + 9 + 3, antY + 18);
	glVertex2f(antX + 43 + 8, antY + 21);
	glVertex2f(antX + 43 + 2, antY + 21);
	glVertex2f(antX + 43, antY + 20);
	glEnd();

	glLineWidth(1);
	glBegin(GL_LINES);
	glColor3f(0, 0, 0);
	glVertex2f(antX + 43 + 9 + 2, antY + 7);
	glVertex2f(antX + 43 + 9 + 3 + 7, antY + 7 - 3);
	glVertex2f(antX + 43 + 9 + 2, antY + 18);
	glVertex2f(antX + 43 + 9 + 3 + 7, antY + 18 + 3);
	glEnd();

	glColor3f(1, 1, 1);
	glBegin(GL_POINTS);
	glVertex2f(antX + 43 + 9, antY + 9);
	glVertex2f(antX + 43 + 9, antY + 16);
	glEnd();

}
void drawRLeg1(int antX, int antY) {
	glLineWidth(3);
	glBegin(GL_LINES);
	glColor3f(0.1, 0.1, 0.1);
	glVertex2f(antX + 12 + 3 + 1, antY + 23 - 1);
	glVertex2f(antX + 12 + 3 - 5, antY + 23 + 5);

	glVertex2f(antX + 12 + 15 - 1, antY + 23 - 2);
	glVertex2f(antX + 12 + 15 + 7, antY + 23 + 6);

	glVertex2f(antX + 30 + 20 - 1, antY + 25 - 2);
	glVertex2f(antX + 30 + 20 + 7, antY + 25 + 6);

	//--------------------------------------
	glVertex2f(antX + 12 + 3 + 1, antY + 2 + 1);
	glVertex2f(antX + 12 + 3 - 5, antY + 2 - 5);

	glVertex2f(antX + 12 + 15 - 1, antY + 2 + 2);
	glVertex2f(antX + 12 + 15 + 7, antY + 2 - 6);

	glVertex2f(antX + 30 + 20 - 1, antY + 2);
	glVertex2f(antX + 30 + 20 + 7, antY - 6);
	glEnd();
}
void drawRLeg2(int antX, int antY) {
	glLineWidth(3);
	glBegin(GL_LINES);
	glColor3f(0.1, 0.1, 0.1);
	glVertex2f(antX + 12 + 3 + 1, antY + 23 - 1);
	glVertex2f(antX + 12 + 3 + 5, antY + 23 + 5);

	glVertex2f(antX + 12 + 15 - 1, antY + 23 - 2);
	glVertex2f(antX + 12 + 15 - 7, antY + 23 + 6);

	glVertex2f(antX + 30 + 20 - 1, antY + 25 - 2);
	glVertex2f(antX + 30 + 20 - 7, antY + 25 + 6);

	//--------------------------------------
	glVertex2f(antX + 12 + 3 + 1, antY + 2 + 1);
	glVertex2f(antX + 12 + 3 + 5, antY + 2 - 5);

	glVertex2f(antX + 12 + 15 - 1, antY + 2 + 2);
	glVertex2f(antX + 12 + 15 - 7, antY + 2 - 6);

	glVertex2f(antX + 30 + 20 - 1, antY + 2);
	glVertex2f(antX + 30 + 20 - 7, antY - 6);
	glEnd();
}
void drawCharRight(int antX, int antY) {
	antX += 600;
	antY += 300;
	if (Leg == 1)drawRLeg1(antX, antY);
	else drawRLeg2(antX, antY);
	glBegin(GL_POLYGON);
	glColor3f(0, 0, 0);
	glVertex2f(antX + 30, antY + 5);
	glVertex2f(antX + 30 + 5, antY);
	glVertex2f(antX + 30 + 20, antY);
	glVertex2f(antX + 30 + 25, antY + 5);
	glVertex2f(antX + 30 + 25, antY + 20);
	glVertex2f(antX + 30 + 20, antY + 25);
	glVertex2f(antX + 30 + 5, antY + 25);
	glVertex2f(antX + 30, antY + 20);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.1, 0.1, 0.1);
	glVertex2f(antX + 12, antY + 5);
	glVertex2f(antX + 12 + 3, antY + 2);
	glVertex2f(antX + 12 + 15, antY + 2);
	glVertex2f(antX + 12 + 18, antY + 5);
	glVertex2f(antX + 12 + 18, antY + 20);
	glVertex2f(antX + 12 + 15, antY + 23);
	glVertex2f(antX + 12 + 3, antY + 23);
	glVertex2f(antX + 12, antY + 20);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.2, 0.2);
	glVertex2f(antX, antY + 5);
	glVertex2f(antX + 4, antY + 4);
	glVertex2f(antX + 10, antY + 4);
	glVertex2f(antX + 12, antY + 7);
	glVertex2f(antX + 12, antY + 18);
	glVertex2f(antX + 10, antY + 21);
	glVertex2f(antX + 4, antY + 21);
	glVertex2f(antX, antY + 20);
	glEnd();

	glLineWidth(1);
	glBegin(GL_LINES);
	glColor3f(0, 0, 0);
	glVertex2f(antX + 2, antY + 7);
	glVertex2f(antX - 7, antY + 7 - 3);
	glVertex2f(antX + 2, antY + 18);
	glVertex2f(antX - 7, antY + 18 + 3);
	glEnd();

	glColor3f(1, 1, 1);
	glBegin(GL_POINTS);
	glVertex2f(antX + 3, antY + 9);
	glVertex2f(antX + 3, antY + 16);
	glEnd();
}

void moveCharRight() {
	int a = 200;
	float sp = 4;
	for (int i = 0; i < 3; i++) {
		sp=sp<3?3.5:sp;
		r[0][i].movedPos -= sp;
		if (r[0][i].movedPos <= -650) {
			r[0][i].movedPos = 0;
			r[0][i].visibility = true;
		}
		if (r[0][i].visibility)	drawCharRight((int)r[0][i].movedPos, a);
		r[0][i].posX = (int)r[0][i].movedPos + 600;
		r[0][i].posY = a + 300;
		//----------------------------------------------
		r[1][i].movedPos -= sp;
		if (r[1][i].movedPos <= -650) {
			r[1][i].movedPos = 0;
			r[1][i].visibility = true;
		}
		if (r[1][i].visibility)	drawCharRight((int)r[1][i].movedPos, a);
		r[1][i].posX = (int)r[1][i].movedPos + 600;
		r[1][i].posY = a + 300;

		a -= 210;
		sp --;
	}
}

void moveCharLeft() {
	int a = -110;
	float sp = 4;
	for (int i = 0; i < 2; i++) {
		l[0][i].movedPos += sp;
		if (l[0][i].movedPos >= 450) {
			l[0][i].movedPos = -200;
			l[0][i].visibility = true;
		}
		if (l[0][i].visibility)	drawCharLeft((int)l[0][i].movedPos, a);
		l[0][i].posX = (int)l[0][i].movedPos + 150;
		l[0][i].posY = a + 300;
		//---------------------------------------
		l[1][i].movedPos += sp;
		if (l[1][i].movedPos >= 450) {
			l[1][i].movedPos = -200;
			l[1][i].visibility = true;
		}
		if (l[1][i].visibility)	drawCharLeft((int)l[1][i].movedPos, a);
		l[1][i].posX = (int)l[1][i].movedPos + 150;
		l[1][i].posY = a + 300;

		a += 210;
		sp--;
	}
}

void update(int value) {
	if (countL>50000)countL = 0;
	countL++;
	if (countL % 10 == 0) {
		if (Leg == 1)Leg = 2;
		else if (Leg == 2) Leg = 1;
	}
	moveCharRight();
	moveCharLeft();
	glutPostRedisplay();
	glutTimerFunc(20, update, 0);
}

void lifeBar() {
	switch (lifeGone) {
	case 0: glColor3f(0, .2, 0);
		break;
	case 1: glColor3f(0, .5, 0);
		break;
	case 2: glColor3f(0, .8, 0);
		break;
	case 3: glColor3f(0, 1, 0);
		break;
	case 4: glColor3f(.6, 0, 0);
		break;
	case 5: glColor3f(1, 0, 0);
		break;
	default:
		break;
	}
	if (lifeGone<6) {
		glBegin(GL_QUADS);
		glVertex2f(595, 5);
		glVertex2f(595, 30);
		glVertex2f(5 + (100 * lifeGone), 30);
		glVertex2f(5 + (100 * lifeGone), 5);
		glEnd();
	}
}

void Draw_pointer(float cx, float cy, float r, int num_segments)
{
	float theta = 2 * 3.1415926 / float(num_segments);
	float tangetial_factor = tanf(theta);//calculate the tangential factor 
	float radial_factor = cosf(theta);//calculate the radial factor 
	float x = r;//we start at angle = 0 
	float y = 0;
	glLineWidth(3);

	glBegin(GL_LINE_LOOP);
	glColor3f(1, 0, 0);

	for (int ii = 0; ii < num_segments; ii++)
	{
		glVertex2f(x + cx, y + cy);
		float tx = -y;
		float ty = x;

		x += tx * tangetial_factor;
		y += ty * tangetial_factor;


		x *= radial_factor;
		y *= radial_factor;
	}
	glEnd();
	glBegin(GL_LINES);
	glColor3f(1, 0, 0);
	glVertex2f(0, -r);
	glVertex2f(0, -4);
	glEnd();
	glBegin(GL_LINES);
	glColor3f(1, 0, 0);
	glVertex2f(0, r);
	glVertex2f(0, 4);
	glEnd();

	glBegin(GL_LINES);
	glColor3f(1, 0, 0);
	glVertex2f(-r, 0);
	glVertex2f(-4, 0);
	glEnd();

	glBegin(GL_LINES);
	glColor3f(1, 0, 0);
	glVertex2f(r, 0);
	glVertex2f(4, 0);
	glEnd();
}
void drawBack() {
	glBegin(GL_QUADS);
	for (int k = 0; k<600; k += 100) {
		for (int i = 0; i<600; i += 200) {
			glColor3f(0.38, 0.24, 0.02);
			glVertex2f(k + 0, i + 0);
			glVertex2f(k + 50, i + 0);
			glVertex2f(k + 50, i + 5);
			glVertex2f(k + 0, i + 5);

			glVertex2f(k + 0, i + 0);
			glVertex2f(k + 5, i + 0);
			glVertex2f(k + 5, i + 200);
			glVertex2f(k + 0, i + 200);

			glVertex2f(k + 0, i + 195);
			glVertex2f(k + 50, i + 195);
			glVertex2f(k + 50, i + 200);
			glVertex2f(k + 0, i + 200);

			glVertex2f(k + 45, i + 200);
			glVertex2f(k + 45, i + 0);
			glVertex2f(k + 50, i + 0);
			glVertex2f(k + 50, i + 200);
		}
		for (int j = -100; j<600; j += 200) {
			glVertex2f(k + 50, j + 0);
			glVertex2f(k + 100, j + 0);
			glVertex2f(k + 100, j + 5);
			glVertex2f(k + 50, j + 5);

			glVertex2f(k + 50, j + 0);
			glVertex2f(k + 55, j + 0);
			glVertex2f(k + 55, j + 200);
			glVertex2f(k + 50, j + 200);

			glVertex2f(k + 50, j + 195);
			glVertex2f(k + 100, j + 195);
			glVertex2f(k + 100, j + 200);
			glVertex2f(k + 50, j + 200);

			glVertex2f(k + 95, j + 200);
			glVertex2f(k + 95, j + 0);
			glVertex2f(k + 100, j + 0);
			glVertex2f(k + 100, j + 200);
		}
	}
	glEnd();
}

void myDisplay(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	POINT mpos;
	ShowCursor(true);
	GetCursorPos(&mpos);
	drawBack();
	if (lifeGone <= 5) {

		moveCharRight();
		moveCharLeft();
		lifeBar();

		glLoadIdentity();
		glTranslatef(mpos.x - 6, 624 - mpos.y, 0);
		Draw_pointer(0, 0, 11, 10);
		glLoadIdentity();
		//scoreDisplay();
	}
	else{
		gameOver();
	}
	glFlush();
}

bool collisionRight(int x) {
	for (int i = 0; i<2; i++) {
		if (r[i][x].visibility && r[i][x].posX - 2 <= mouseX && r[i][x].posX + 57 >= mouseX) {
			r[i][x].visibility = false;
			score++;
			return true;
		}
	}
	return false;
}

bool collisionLeft(int x) {
	for (int i = 0; i<2; i++) {
		if (l[i][x].visibility && l[i][x].posX - 2 <= mouseX && l[i][x].posX + 57 >= mouseX) {
			l[i][x].visibility = false;
			score++;
			return true;
		}
	}
	return false;
}

void myMouse(int button, int state, int x, int y) {
	if ((button == GLUT_LEFT_BUTTON) && (state == GLUT_DOWN)) {
		bool clickColide;
		mouseX = x;
		mouseY = 600 - y;
		//cout<<mousex<<"\t"<<mousey<<endl;
		if (mouseY >= 500 && mouseY <= 525) clickColide = collisionRight(0);
		else if (mouseY >= 290 && mouseY <= 315) clickColide = collisionRight(1);
		else if (mouseY >= 80 && mouseY <= 105) clickColide = collisionRight(2);

		else if (mouseY >= 190 && mouseY <= 215) clickColide = collisionLeft(0);
		else if (mouseY >= 400 && mouseY <= 425) clickColide = collisionLeft(1);
		else clickColide = false;
		if (!clickColide) lifeGone++;
		glutPostRedisplay();
	}
}

void myInit(void) {
	glClearColor(0.71, 0.37, 0.2, 1);
	glColor3f(1, 1, 1);
	glPointSize(4.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 600, 0, 600.0);
}

void timeTick(void){
	if (UpwardsScrollVelocity< -600)
		view -= 0.000011;
	if (view < 0) { view = 20; UpwardsScrollVelocity = -10.0; }
	//  exit(0);
	UpwardsScrollVelocity -= 0.1;
	glutPostRedisplay();

}
void reshape(int w, int h){
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60, 1.0, 1.0, 3200);
	glMatrixMode(GL_MODELVIEW);
}

void RenderToDisplay(){
	int l, lenghOfQuote, i;

	glTranslatef(0.0, 15, UpwardsScrollVelocity);
	glRotatef(-20, 1.0, 0.0, 0.0);
	glScalef(0.1, 0.1, 0.1);
	for (l = 0; l<numberOfQuotes; l++)	{
		lenghOfQuote = (int)strlen(quote[l]);
		glPushMatrix();
		glTranslatef(-(lenghOfQuote * 37), -(l * 200), 0.0);
		for (i = 0; i < lenghOfQuote; i++)
		{
			glColor3f((UpwardsScrollVelocity / 10) + 300 + (l * 10), (UpwardsScrollVelocity / 10) + 300 + (l * 10), 0.0);
			glutStrokeCharacter(GLUT_STROKE_ROMAN, quote[l][i]);
		}
		glPopMatrix();
	}

}
void myDisplayFunction(void){
	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(0.0, 30.0, 100.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	RenderToDisplay();
	glutSwapBuffers();
}
void gameOver(){
	char* str = new char[30];
	sprintf(str, "%.4g", score);

	strcpy_s(quote[0], "Game Over!");
	strcpy_s(quote[1], "Your Score :");
	strcpy_s(quote[2], str);
	numberOfQuotes = 5;
	glutDestroyWindow(1);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(1300, 680);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Game Finish");
	glClearColor(0.71, 0.37, 0.2, 1);
	glLineWidth(3);

	glutDisplayFunc(myDisplayFunction);
	glutReshapeFunc(reshape);
	//glutIdleFunc(timeTick);
	glutMainLoop();
}


void setCharPos() {
	for (int j = 0; j<3; j++) {
		r[1][j].movedPos = 310;
		if (j<2) l[1][j].movedPos = 300;
	}
}

void main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(600, 600);
	glutInitWindowPosition(0, 0);
	setCharPos();
	glutCreateWindow("SHOOTER");
	glutDisplayFunc(myDisplay);
	myInit();

	glutTimerFunc(20, update, 0);
	glutMouseFunc(myMouse);

	glutMainLoop();
}
